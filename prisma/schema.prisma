// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  phone     String?
  role      Role     @default(CUSTOMER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  addresses Address[]
  orders    Order[]
  cartItems CartItem[]
  
  @@map("users")
}

model Address {
  id        String   @id @default(cuid())
  street    String
  city      String
  state     String
  zipCode   String
  country   String
  isDefault Boolean  @default(false)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders Order[]
  
  @@map("addresses")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  slug        String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  products Product[]
  
  @@map("categories")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Float
  comparePrice Float?
  sku         String   @unique
  stock       Int      @default(0)
  isActive    Boolean  @default(true)
  categoryId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  category   Category      @relation(fields: [categoryId], references: [id])
  images     ProductImage[]
  variants   ProductVariant[]
  orderItems OrderItem[]
  cartItems  CartItem[]
  
  @@map("products")
}

model ProductImage {
  id        String   @id @default(cuid())
  url       String
  altText   String?
  isPrimary Boolean  @default(false)
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@map("product_images")
}

model ProductVariant {
  id          String   @id @default(cuid())
  name        String
  value       String
  priceAdjust Float    @default(0)
  stock       Int      @default(0)
  productId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  product    Product      @relation(fields: [productId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]
  cartItems  CartItem[]
  
  @@map("product_variants")
}

model Order {
  id            String      @id @default(cuid())
  orderNumber   String      @unique
  status        OrderStatus @default(PENDING)
  subtotal      Float
  tax           Float       @default(0)
  shipping      Float       @default(0)
  total         Float
  userId        String?
  addressId     String?
  paymentMethod String?
  notes         String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relations
  user     User?        @relation(fields: [userId], references: [id])
  address  Address?     @relation(fields: [addressId], references: [id])
  items    OrderItem[]
  
  @@map("orders")
}

model OrderItem {
  id         String   @id @default(cuid())
  quantity   Int
  price      Float
  orderId    String
  productId  String
  variantId  String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  order   Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product        @relation(fields: [productId], references: [id])
  variant ProductVariant? @relation(fields: [variantId], references: [id])
  
  @@map("order_items")
}

model CartItem {
  id        String   @id @default(cuid())
  quantity  Int      @default(1)
  userId    String?
  sessionId String?
  productId String
  variantId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user    User?           @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product        @relation(fields: [productId], references: [id])
  variant ProductVariant? @relation(fields: [variantId], references: [id])
  
  @@unique([userId, productId, variantId])
  @@unique([sessionId, productId, variantId])
  @@map("cart_items")
}

enum Role {
  CUSTOMER
  ADMIN
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}